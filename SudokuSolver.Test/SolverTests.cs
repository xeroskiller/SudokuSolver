using Newtonsoft.Json;
using SudokuSolver.Solver;
using System;
using System.IO;
using System.Linq;
using System.Text.Json;
using Xunit;
using SudokuSolver.Solver;

namespace SudokuSolver.Test
{
    public class SolverTests
    {
        private JsonObject testCases { get; set; }

        public SolverTests()
        {
            var fileContents = File.ReadAllText("./SudokuExamples.json");
            testCases = JsonConvert.DeserializeObject<JsonObject>(fileContents);
        }

        [Fact]
        public void Solve_ExamplePuzzlesFromJsonWithSolution_SucceedsAndMatches()
        {
            foreach (var (initial, solution) in testCases.Examples.Select(ex => (ex.InitialState, ex.Solution)))
            {
                var board = initial.DeserializeBoard();
                var solver = new SudokuSolver();
                var solvedBoard = solver.SolvePuzzle(board);

                Assert.NotNull(solvedBoard);
                Assert.True(!(from sbyte m in solvedBoard where m == 0 select 1).Any());

                Assert.Equal(solvedBoard.SerializeSudoku(), solution);
            }
        }

        [Theory]        
        #region InlineData (111 cases)
        [InlineData("100007090030020008009600500005300900010080002600004000300000010040000007007000300")]
        [InlineData("000000070060010004003400200800003050002900700040080009020060007000100900700008060")]
        [InlineData("100500400009030000070008005001000030800600500090007008004020010200800600000001002")]
        [InlineData("080000001007004020600300700002009000100060008030400000001700600090008005000000040")]
        [InlineData("100400800040030009009006050050300000000001600000070002004010900700800004020004080")]
        [InlineData("005009700060000020100800006010700004007060030600003200000006040090050100800100002")]
        [InlineData("600000200090001005008030040000002001500600900007090000070003002000400500006070080")]
        [InlineData("100000060000100003005002900009001000700040080030500002500400006008060070070005000")]
        [InlineData("000010004030200000600008090007060005900005080000800400040900100700002040005030007")]
        [InlineData("400060070000000600030002001700008500010400000020950000000000705009100030003040080")]
        [InlineData("004010000000325000702090308308000020090000060020000805809050706000439000000080900")]
        [InlineData("309000400200709000087000000750060230600904008028050041000000590000106007006000104")]
        [InlineData("300080000000700005100000000000000360002004000070000000000060130045200000000000800")]
        [InlineData("018000700000300200070000000000071000600000040300000000500400003020080000000000060")]
        [InlineData("000010780500009000000000040026000000000600003074080000000003002080040010600500000")]
        [InlineData("380600000009000000020030510000005000030010060000400000017050080000000900000007032")]
        [InlineData("020000000000600003074080000000003002080040010600500000000010780500009000000000040")]
        [InlineData("080003060030000010097500380000090200008070400003060000016002890049000020052109640")]
        [InlineData("000003060000000010097500080000090200008070400003060000010002890040000000050100000")]
        [InlineData("390600000006000000040020810000005000070010020000400000085040070000000300000007042")]
        [InlineData("350600000002000000060050480000005000030010060000400000018030050000000700000007092")]
        [InlineData("700020004050000080001000600000307000100060009000508000006000500080000040900040001")]
        [InlineData("340600000007000000020080570000005000070010020000400000036020010000000900000007082")]
        [InlineData("700000019460190000000682704090000007000300405006700000001000000200074000000200300")]
        [InlineData("050600800200040000000000100000073000010500000080000000304000007700000020000100000")]
        [InlineData("000070940070090005300005070087400100463080000000007080800700000700000028050268000")]
        [InlineData("320600000006000000040070810000005000090010070000400000085040090000000300000007042")]
        [InlineData("600070009010000020005000400000102000900080006000609000001000200030000040700050008")]
        [InlineData("802000004090000007005001390080017000000502001000008036007100000400070000320005000")]
        [InlineData("390600000002000000040030850000005000060010090000400000015060030000000700000007082")]
        [InlineData("350600000002000000090050480000005000060010090000400000018060050000000700000007032")]
        [InlineData("380600000006000000020070410000005000090010070000400000048020050000000300000007092")]
        [InlineData("390600000002000000010030870000005000030010060000400000064090030000000600000007052")]
        [InlineData("200080006010000070009000500000905000300010007000203000005000400070000090800040003")]
        [InlineData("390600000006000000040080520000005000020010090000400000018060040000000900000007032")]
        [InlineData("600040003010000070005000800000502000300090002000103000008000900070000050200030004")]
        [InlineData("370600000009000000020080160000005000090010080000400000058060090000000300000007042")]
        [InlineData("390600000007000000060090120000005000020010060000400000085060090000000400000007032")]
        [InlineData("340600000007000000020090570000005000070010020000400000068020010000000300000007092")]
        [InlineData("000900807000007000003000002009004000001060000060003001008040100030600780700009025")]
        [InlineData("380600000004000000010090370000005000090010080000400000035080060000000400000007012")]
        [InlineData("700603000900000200000000000309100000000050802000000400020040000000700030080000000")]
        [InlineData("320600000005000000060080710000005000080010030000400000016030080000000900000007062")]
        [InlineData("320600000009000000080070150000005000070010030000400000015080070000000600000007082")]
        [InlineData("380600000004000000010090720000005000030010060000400000098060030000000500000007042")]
        [InlineData("400010008050000020006000900000902000800050003000108000009000600020000050100070004")]
        [InlineData("350600000004000000020070890000005000070010020000400000036090010000000500000007082")]
        [InlineData("370600000009000000080020710000005000020010080000400000016080070000000400000007032")]
        [InlineData("000030000930060800560000004002016000850470000600029003700000210000000000000000059")]
        [InlineData("070000000600540003001002400007008000000290000049003008003000700200734009000000060")]
        [InlineData("300060005020000040007000200000607000900080006000901000002000700040000010600050009")]
        [InlineData("350600000007000000090030180000005000060010090000400000018090060000000500000007032")]
        [InlineData("060000070900080006003009100008095000020408060000210800005900600300040008040000020")]
        [InlineData("370600000009000000060020180000005000020010090000400000016090070000000500000007042")]
        [InlineData("390600000002000000010080750000005000070010080000400000038050070000000600000007092")]
        [InlineData("390600000007000000060040820000005000080010060000400000046080010000000300000007092")]
        [InlineData("500000010000400200080200000020000600000030070000010000103000050000800400700000000")]
        [InlineData("003050400700060000050800060500003004010070080200400007040008050000040009006010200")]
        [InlineData("380600000004000000010070520000005000070010090000400000058090070000000400000007052")]
        [InlineData("370600000004000000010080520000005000020010080000400000047050090000000800000007062")]
        [InlineData("370600000005000000060020190000005000020010060000400000038060010000000500000007032")]
        [InlineData("380600000009000000040070120000005000070010080000400000015080090000000300000007042")]
        [InlineData("600002000040000030000890020005000389000030500900001000420680700007100890000000000")]
        [InlineData("370600000004000000010080520000005000020010080000400000047050030000000800000007062")]
        [InlineData("002090107038600000400000000000005000009010300000400000000000004000007920806030700")]
        [InlineData("000030000930060800560000004302016000850473000600029003700000210000000000000000059")]
        [InlineData("000020060000000028030000000000400300206000000000007100070300400800000050000100000")]
        [InlineData("310600000005000000090070820000005000080010070000400000074090030000000400000007012")]
        [InlineData("380600000004000000060090170000005000090010030000400000016030090000000500000007082")]
        [InlineData("100040002050000090008000300000509000700080003000706000007000500090000040600020001")]
        [InlineData("340600000005000000080070120000005000070010030000400000016020040000000900000007082")]
        [InlineData("900070004010000050008000200000809000700040006000207000003000100020000080600090007")]
        [InlineData("005070208080042005200000006006000000010080000350001000007064000000020300100700040")]
        [InlineData("500000010000400200080200000020000600000030070000010000103000050000600400700000000")]
        [InlineData("001200060009008040050040900730080000005030100000060034003020090020800500090001400")]
        [InlineData("370600000004000000050080190000005000090010030000400000085030070000000600000007042")]
        [InlineData("350600000009000000060080710000005000080010030000400000016030070000000400000007082")]
        [InlineData("310600000004000000050090280000005000070010030000400000038050090000000400000007062")]
        [InlineData("002600000090000400010009007000046005004090080000710304800031000300980000000400032")]
        [InlineData("310600000002000000060080370000005000030010060000400000075030090000000600000007042")]
        [InlineData("000000000000000509403090010020000040980030105350700000000540200200003000000002801")]
        [InlineData("380600000005000000060020710000005000020010080000400000016080070000000900000007042")]
        [InlineData("000070090000008004042001070004000008800205009500000700070600130200800000060030000")]
        [InlineData("380600000002000000070030510000005000090010060000400000018060030000000400000007092")]
        [InlineData("320600000007000000010080370000005000070010020000400000086020090000000400000007012")]
        [InlineData("310600000002000000050030890000005000080010070000400000047080030000000900000007062")]
        [InlineData("605000000200400070010070609400000700190030800003009002060308900040007000000100200")]
        [InlineData("001080604037600000500000000000005000006010800000400000000000003000007520802090700")]
        [InlineData("370090000000000081020000000001600040200070300000000000500000200000104000000800000")]
        [InlineData("340600000002000000060090830000005000080010070000400000075080010000000400000007062")]
        [InlineData("320600000007000000040080590000005000030010070000400000098030010000000600000007042")]
        [InlineData("300050001040000060007000800000904000200080003000106000009000400060000020500010007")]
        [InlineData("300090007020000050007000800000304000100060003000702000004000200080000040900030001")]
        [InlineData("800000000074006000530800000300007000060020307000100002000604019010002040000000850")]
        [InlineData("320600000009000000060040580000005000080010020000400000017050030000000900000007062")]
        [InlineData("320600000009000000060080570000005000080010020000400000037040010000000900000007062")]
        [InlineData("390600000007000000010040280000005000080010090000400000046030010000000500000007062")]
        [InlineData("340600000002000000070030510000005000030010070000400000028050060000000100000007032")]
        [InlineData("000070000349000070006500840003086009200000000005900000500020001900000007008001600")]
        [InlineData("320600000007000000010090580000005000090010020000400000048030090000000600000007012")]
        [InlineData("004000002000090000009006405006500007540300000030010020050020000060040010000100008")]
        [InlineData("310600000002000000050090780000005000090010060000400000075060030000000400000007092")]
        [InlineData("310600000007000000090020850000005000030010090000400000084090010000000600000007032")]
        [InlineData("400000000000000800006104007307006080050038006604900000100500000020000790000003520")]
        [InlineData("390600000005000000020070460000005000070010090000400000086090040000000300000007012")]
        [InlineData("350600000004000000010070290000005000070010030000400000068090070000000400000007052")]
        [InlineData("320600000009000000010080450000005000080010020000400000075030080000000900000007062")]
        [InlineData("050090000086002004009001600010000950000324000000000008071060000000000041005009000")]
        [InlineData("320600000007000000040030180000005000060010030000400000038040060000000500000007092")]
        [InlineData("009001087000000400001080060000836020006000000450007006500008009010060002000420000")]
        [InlineData("020500700600090000000000100010400002000083000070000000309000080000100000800000000")]
        #endregion
        public void Solve_ExamplePuzzlesFromJsonWithoutSolution_Succeeds(string puzzleString)
        {
            var board = puzzleString.DeserializeBoard();
            var solvedBoard = SolvePuzzle(board);

            // Non null
            Assert.NotNull(solvedBoard);

            // No zeros in the whole board
            Assert.True(!(from sbyte m in solvedBoard where m == 0 select 1).Any());

            // Matches initial state, except where initial state was unknown
            Assert.Empty(from m in Enumerable.Range(0, 9)
                         from n in Enumerable.Range(0, 9)
                         where board[m, n] != solvedBoard[m, n] && board[m, n] != 0
                         select 1);

            // This throws if it fails any of the rules of sudoku anywhere
            Assert.NotNull(new SudokuState(solvedBoard));
        }

        [Theory, InlineData("000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        public void Solve_ReallyHardPuzzle_Eventually(string puzzleString)
        {
            var board = puzzleString.DeserializeBoard();
            var solvedBoard = SolvePuzzle(board);

            // Non null
            Assert.NotNull(solvedBoard);

            // No zeros in the whole board
            Assert.True(!(from sbyte m in solvedBoard where m == 0 select 1).Any());

            // This throws if it fails any of the rules of sudoku anywhere
            Assert.NotNull(new SudokuState(solvedBoard));
        }


        [Theory]
        [InlineData("001000100000000000000000000000000000000000000000000000000000000000000000000000000")] // bad row
        [InlineData("001000000000000000000000000000000000001000000000000000000000000000000000000000000")] // bad col
        [InlineData("001000000100000000000000000000000000000000000000000000000000000000000000000000000")] // bad sq
        [InlineData("001000100000000000000000000000000000001000000000000000000000000000000000000000000")] // bad row + col
        [InlineData("001000000100000000000000000000000000001000000000000000000000000000000000000000000")] // bad col + sq
        [InlineData("001000100100000000000000000000000000000000000000000000000000000000000000000000000")] // bad row + sq
        [InlineData("001000100100000000000000000000000000000000000000000000001000000000000000000000000")] // bad row + col + sq
        [InlineData("00000000000000000000000000000000000000000000000000000000000000000000000000000000")] // bad dims
        public void Solve_InvalidPuzzleState_Throws(string puzzleString)
        {
            var board = puzzleString.DeserializeBoard();

            Assert.Throws<ArgumentException>(() => SolvePuzzle(board));
        }

        // TODO :: Test for board state with invalid value(s)
    }

    internal class JsonObject
    {
        public SampleProblem[] Examples { get; set; }

        [JsonProperty("examplesNoSoln")]
        public string[] ExamplesNoSolution { get; set; }
    }

    internal class SampleProblem
    {
        public string InitialState { get; set; }
        public string Solution { get; set; }
    }
}
